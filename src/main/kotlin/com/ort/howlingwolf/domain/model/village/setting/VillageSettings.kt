package com.ort.howlingwolf.domain.model.village.setting

import com.ort.dbflute.allcommon.CDef
import com.ort.howlingwolf.domain.model.message.MessageType
import java.time.LocalDateTime

data class VillageSettings(
    val capacity: PersonCapacity,
    val time: VillageTime,
    val charachip: VillageCharachip,
    val organizations: VillageOrganizations,
    val rules: VillageRules,
    val password: VillagePassword
) {

    companion object {

        fun createAutoGeneratedForRegister(
            organization: String,
            startDatetime: LocalDateTime,
            silentHours: Int?,
            availableDummySkill: Boolean
        ): VillageSettings {
            val personNum = organization.length
            return VillageSettings(
                capacity = PersonCapacity(
                    min = personNum,
                    max = personNum
                ),
                time = VillageTime(
                    termType = CDef.Term.長期.code(),
                    prologueStartDatetime = LocalDateTime.now(),
                    epilogueDay = null,
                    epilogueStartDatetime = null,
                    startDatetime = startDatetime,
                    dayChangeIntervalSeconds = 86400,
                    silentHours = silentHours
                ),
                charachip = VillageCharachip(
                    dummyCharaId = 1,
                    charachipId = 1
                ),
                organizations = VillageOrganizations(mapOf(personNum to organization)),
                rules = VillageRules(
                    openVote = false,
                    availableSkillRequest = true,
                    availableSpectate = false,
                    openSkillInGrave = false,
                    visibleGraveMessage = false,
                    availableSuddenlyDeath = true,
                    availableCommit = false,
                    availableDummySkill = availableDummySkill,
                    messageRestrict = VillageMessageRestricts(
                        existRestricts = true,
                        restrictList = listOf(
                            VillageMessageRestrict(
                                type = MessageType(CDef.MessageType.通常発言),
                                count = 20,
                                length = 200
                            ),
                            VillageMessageRestrict(
                                type = MessageType(CDef.MessageType.人狼の囁き),
                                count = 40,
                                length = 200
                            ),
                            VillageMessageRestrict(
                                type = MessageType(CDef.MessageType.独り言),
                                count = 100,
                                length = 200
                            ),
                            VillageMessageRestrict(
                                type = MessageType(CDef.MessageType.死者の呻き),
                                count = 40,
                                length = 200
                            )
                        )
                    )
                ),
                password = VillagePassword(
                    joinPasswordRequired = false,
                    joinPassword = null
                )
            )
        }
    }

    fun existsDifference(setting: VillageSettings): Boolean {
        return capacity.existsDifference(setting.capacity)
            || time.existsDifference(setting.time)
            || organizations.existsDifference(setting.organizations)
            || rules.existsDifference(setting.rules)
            || password.existsDifference(setting.password)
    }
}